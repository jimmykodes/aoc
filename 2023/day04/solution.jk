fn find(needle, haystack) {
  for i := 0; i < len(haystack); i = i + 1; {
    if haystack[i] == needle {
      return i;
    }
  };
  return -1;
}

fn trim(str) {
  while str[0] == " " {
    str = slice(str, 1, len(str));
  }
  return str
}

fn split(str) {
  out := [];
  idx := 0;

  while !!str {
    str = trim(str);
    idx = find(" ", str);
    if idx == -1 {
      out = append(out, int(str));
      str = "";
    } else {
      out = append(out, int(slice(str, idx)));
      str = slice(str, idx, len(str));
    }
  }

  return out;
}

fn pow(num, exp) {
  out := 1;
  for i := 0; i < exp; i = i + 1; {
    out = out * num;
  }
  return out;
}

fn loadGames() {
  f := open("assets/input.txt");
  games := [];

  line := readline(f);
  colonPos := find(":", line);
  game := {};
  winning := "";
  have := "";
  card := "";
  num := "";
  pipePos := 0;

  while !!line {
    game = {};
    card = slice(line, colonPos);
    num = slice(card, 5, len(card));
    num = int(trim(num));
    set(game, "num", num);

    line = slice(line, colonPos+1, len(line));
    pipePos = find("|", line);

    winning = split(slice(line, pipePos-1));
    set(game, "winning", winning);

    have = split(slice(line, pipePos+2, len(line)));
    set(game, "have", have);

    games = append(games, game);
    line = readline(f);
  }
  return games;
}

fn main() {
  games := loadGames();

  sum := 0;
  for i := 0; i < len(games); i = i + 1; {
    numWins := 0;
    game := games[i];
    have := game["have"];
    winning := game["winning"];
    for j := 0; j < len(have); j = j + 1; {
      if find(have[j], winning) != -1 {
        numWins = numWins + 1;
      }
    }
    if numWins > 0 {
      sum = sum + pow(2, numWins-1);
    }
  }
  print(sum);
}

main();
